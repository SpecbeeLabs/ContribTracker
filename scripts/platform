#!/usr/bin/env bash
# For latest version of this script goto:
# http://code.projspace.com/axelerant/platform-template
set -e

setremote() {
  CMD="${CLI_CMD} project:set-remote ${PLATFORM_PROJECT_ID}"
  eval $CMD
}

deploy() {
  setremote
  CMD="${CLI_CMD} push --verbose --force --target=${PF_BRANCH}"
  if [ "$PF_PARENT_ENV" != "$PF_BRANCH" ]; then
    CMD="$CMD --activate --parent=${PF_PARENT_ENV}"
  fi
  eval $CMD
}

ssh() {
  if [ $# -eq 0 ]; then
    CMD="${CLI_CMD} ssh -p ${PLATFORM_PROJECT_ID} -e ${PF_BRANCH}"
  else
    CMD="${CLI_CMD} ssh -p ${PLATFORM_PROJECT_ID} -e ${PF_BRANCH} '${*}'"
  fi
  eval $CMD
}

geturl() {
  if [ $# -eq 0 ]; then
    CMD="${CLI_CMD} environment:url -p ${PLATFORM_PROJECT_ID} -e ${CI_BUILD_REF_NAME} --pipe | head -1"
  else
    CMD="${CLI_CMD} environment:url -p ${PLATFORM_PROJECT_ID} -e ${CI_BUILD_REF_NAME} --pipe | head -1 > $1"
  fi
  eval $CMD
}

clean() {
  CMD="${CLI_CMD} environment:delete  --verbose --inactive --merged --environment=${PF_PARENT_ENV} --exclude=master --exclude="${PF_BRANCH}" --yes --delete-branch --no-wait || true"
  eval $CMD
}

# Check basic requirements
if [ -z "$PLATFORM_PROJECT_ID" ]; then
  echo "PLATFORM_PROJECT_ID is required, please contact support if you don't know how to do it."
  exit 1
fi

# By default we use master as the Platform parent env.
PF_PARENT_ENV=${PF_PARENT_ENV:-master}

# By default we don't allow master to be deployed.
ALLOW_MASTER=${ALLOW_MASTER:-0}

# Prepare the variables.
PF_BRANCH=${PF_DEST_BRANCH:-$CI_BUILD_REF_NAME}

# Platform command path.
CLI_CMD=${CLI_CMD:-"$HOME/.platformsh/bin/platform --yes"}

if [ -z "$PF_BRANCH" ]; then
  echo "Source branch (CI_BUILD_REF_NAME or PF_DEST_BRANCH) not defined."
  exit 1
fi

# This script is not for production deployments.
if [ "$PF_BRANCH" = "master" ] && [ "$ALLOW_MASTER" != 1 ]; then
  echo "Not pushing master branch."
  exit
fi

while getopts ":c:" opt; do
  case $opt in
    c)
      case $OPTARG in
        deploy)
          deploy
          ;;
        ssh)
          ssh $(eval "echo \${$OPTIND}")
          ;;
        setremote)
          setremote
          ;;
        clean)
          clean
          ;;
        geturl)
          geturl $(eval "echo \${$OPTIND}")
          ;;
        esac
      ;;
    \?)
      echo "Invalid option: -$OPTARG"
      ;;
    :)
      echo "Option -$OPTARG requires an argument."
      ;;
  esac
done
